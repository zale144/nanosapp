// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: account/proto/account.proto

/*
Package account is a generated protocol buffer package.

It is generated from these files:
	account/proto/account.proto

It has these top-level messages:
	Account
*/
package account

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for AccountService service

type AccountService interface {
	Get(ctx context.Context, in *Account, opts ...client.CallOption) (*Account, error)
	Add(ctx context.Context, in *Account, opts ...client.CallOption) (*Account, error)
}

type accountService struct {
	c    client.Client
	name string
}

func NewAccountService(name string, c client.Client) AccountService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "account"
	}
	return &accountService{
		c:    c,
		name: name,
	}
}

func (c *accountService) Get(ctx context.Context, in *Account, opts ...client.CallOption) (*Account, error) {
	req := c.c.NewRequest(c.name, "AccountService.Get", in)
	out := new(Account)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) Add(ctx context.Context, in *Account, opts ...client.CallOption) (*Account, error) {
	req := c.c.NewRequest(c.name, "AccountService.Add", in)
	out := new(Account)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AccountService service

type AccountServiceHandler interface {
	Get(context.Context, *Account, *Account) error
	Add(context.Context, *Account, *Account) error
}

func RegisterAccountServiceHandler(s server.Server, hdlr AccountServiceHandler, opts ...server.HandlerOption) {
	type accountService interface {
		Get(ctx context.Context, in *Account, out *Account) error
		Add(ctx context.Context, in *Account, out *Account) error
	}
	type AccountService struct {
		accountService
	}
	h := &accountServiceHandler{hdlr}
	s.Handle(s.NewHandler(&AccountService{h}, opts...))
}

type accountServiceHandler struct {
	AccountServiceHandler
}

func (h *accountServiceHandler) Get(ctx context.Context, in *Account, out *Account) error {
	return h.AccountServiceHandler.Get(ctx, in, out)
}

func (h *accountServiceHandler) Add(ctx context.Context, in *Account, out *Account) error {
	return h.AccountServiceHandler.Add(ctx, in, out)
}
